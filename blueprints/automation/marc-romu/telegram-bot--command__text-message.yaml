blueprint:
  name: 'Telegram Bot: Respond to Telegram Command with a text message'
  description: "Listen to a Telegram Command and respond back with a text message
    using Telegram Bot service.\n\n## \"Command\" field\nCommand to listen for. Must
    start with '/'.\n_Example:_ `/start`\n\n## \"Bot\" field\nBot username. It is
    used when there is more than one bot in a group chat.\n_Example:_ `my_bot_username_bot`\n\n##
    \"Title\" and \"Message\" fields\nBoth fields accept markdown:\n\n  - `*bold*`
    for **bold**\n\n  - `_italic_` for _italic_\n\n  - ``monospace`` for `monospace`\n\nThey
    also accept templating.\n\n## \"Reply in private?\" field.\nWhen talking to your
    bot in a group chat, the answer can be sent to the same group chat or directly
    to a private chat with the sender user.\nSet it to TRUE to reply in a private
    chat. Leave it FALSE if you want to send the answer's message in the group chat.\nThis
    field has no effect when talking directly to the bot in a private chat.\n\n##
    \"Delay\" field\nTime, in seconds, to wait before message is sent. It is useful
    in case you need to wait for another action to finish before sending back some
    updated state.\n\n## Example\nWith command `/toggle_living_light` I want to toggle
    the living room light and send back a message with its current state:\n\n  1.
    Using [this other blueprint](https://community.home-assistant.io/t/306626), configure
    command `/toggle_living_light` to execute the desired action (in this case, toggle
    a light).\n\n  2. In the current blueprint:\n\n      - Listen to command `/toggle_living_light`.\n\n
    \     - Set some delay to allow the toggle action to finish. For example, 2 seconds
    would be enough in this example.\n\n      - Set a template message to evaluate
    the state of living light: `Living light is {% if is_state('light.living_room',
    'on') %}*on*{% else %}*off*{% endif %}.`\n\n\n## \"Inline keyboard\" fields\nYou
    can optionally show inline keyboard buttons below telegram message. If you want
    multiple buttons in one row, separate them by commas.\nFormat: `Button label:/command`\n_Example:_
    `Need some help?:/help, Status:/status`\n\n## Available telegram variables in
    this blueprint\nThese variables are received from telegram. You can use them in
    templates within this automation:\n\n  - `telegram_args`: List of words sent after
    command. You can get each word by its index: `telegram_args[0]`, `telegram_args[1]`,
    etc.\n\n  - `telegram_args_as_text`: Single plain text string from arguments'
    list. Useful if you need full text, not single words.\n\n  - `telegram_chat_id`:
    Chat id. It is the same as sender's user id in case it is a private message.\n\n
    \ - `telegram_sender_first_name`: Sender's first name.\n  \n  - `telegram_sender_last_name`:
    Sender's last name.\n  \n  - `telegram_sender_full_name`: Sender's full name,
    as `first_name + \" \" + last_name`\n  \n  - `telegram_sender_user_id`: Sender's
    user id.\n\n\n#### Template example\nUse format `{{ variable_name }}` to indicate
    that it is a template, as usual in Home Assistant.\n_Title:_ `Hi {{ telegram_sender_first_name
    }}!`\n_Message:_ `You said {{ telegram_args_as_text }} after the command`\n"
  domain: automation
  input:
    telegram_command:
      name: Command
      description: 'REQUIRED. Example: /start'
      selector:
        text:
          multiline: false
    telegram_bot:
      name: Bot
      description: 'REQUIRED. Telegram bot username. Example: my_bot'
      default: bot_not_specified_in_automation
      selector:
        text:
          multiline: false
    title:
      name: Title
      description: Optional message's title. Accepts markdown and templates.
      default: ''
      selector:
        text:
          multiline: false
    message:
      name: Message
      description: REQUIRED message's body. Accepts markdown and templates.
      selector:
        text:
          multiline: true
    private:
      name: Reply in private?
      description: If bot is added to a group, set it to TRUE to reply in a private
        chat to the person who executed the command instead of in the group chat.
        This is not needed in case you talk directly to the bot in a private chat.
      default: false
      selector:
        boolean: {}
    delay:
      name: Delay
      description: Optional delay before message is sent, in seconds.
      default: '0'
      selector:
        number:
          min: 0.0
          max: 30.0
          mode: slider
          unit_of_measurement: s
          step: 1.0
    inline_keyboard_1:
      name: Inline keyboard (row 1)
      description: '(optional). Example: Help:/help, Status:/status'
      default: ''
      selector:
        text:
          multiline: false
    inline_keyboard_2:
      name: Inline keyboard (row 2)
      description: '(optional). Example: Help:/help, Status:/status'
      default: ''
      selector:
        text:
          multiline: false
    inline_keyboard_3:
      name: Inline keyboard (row 3)
      description: '(optional). Example: Help:/help, Status:/status'
      default: ''
      selector:
        text:
          multiline: false
    inline_keyboard_4:
      name: Inline keyboard (row 4)
      description: '(optional). Example: Help:/help, Status:/status'
      default: ''
      selector:
        text:
          multiline: false
    inline_keyboard_5:
      name: Inline keyboard (row 5)
      description: '(optional). Example: Help:/help, Status:/status'
      default: ''
      selector:
        text:
          multiline: false
    inline_keyboard_6:
      name: Inline keyboard (row 6)
      description: '(optional). Example: Help:/help, Status:/status'
      default: ''
      selector:
        text:
          multiline: false
  source_url: https://raw.githubusercontent.com/marc-romu/home-assistant_blueprints/main/blueprints/automation/marc-romu_telegram-bot/telegram-bot--command__text-message.yaml
mode: parallel
max: 10
max_exceeded: warning
trigger_variables:
  telegram_command: !input telegram_command
  telegram_bot: !input telegram_bot
  telegram_command_at_bot: '{{ telegram_command ~ ''@'' ~ telegram_bot }}'
trigger:
- platform: event
  id: telegram_command
  event_type: telegram_command
  event_data:
    command: '{{ telegram_command }}'
- platform: event
  id: telegram_callback
  event_type: telegram_callback
  event_data:
    data: '{{ telegram_command }}'
- platform: event
  id: telegram_command
  event_type: telegram_command
  event_data:
    command: '{{ telegram_command_at_bot }}'
- platform: event
  id: telegram_callback
  event_type: telegram_callback
  event_data:
    data: '{{ telegram_command_at_bot }}'
variables:
  trigger_event_type: '{{ trigger.event.event_type }}'
  telegram_command: !input telegram_command
  telegram_bot: !input telegram_bot
  telegram_command_at_bot: '{{ telegram_command ~ ''@'' ~ telegram_bot }}'
  telegram_args: '{{ trigger.event.data[''args''] }}'
  telegram_args_as_text: '{% for arg in telegram_args %}{{ arg }} {% endfor %}'
  telegram_sender_first_name: '{{ trigger.event.data[''from_first''] }}'
  telegram_sender_last_name: '{{ trigger.event.data[''from_last''] }}'
  telegram_sender_full_name: '{{ telegram_sender_first_name }} {{ telegram_sender_last_name
    }}'
  telegram_sender_user_id: '{{ trigger.event.data[''user_id''] }}'
  telegram_chat_id: '{{ trigger.event.data[''chat_id''] }}'
  title: !input title
  message: !input message
  delay: !input delay
  private: !input private
  inline_keyboard_1: !input inline_keyboard_1
  inline_keyboard_2: !input inline_keyboard_2
  inline_keyboard_3: !input inline_keyboard_3
  inline_keyboard_4: !input inline_keyboard_4
  inline_keyboard_5: !input inline_keyboard_5
  inline_keyboard_6: !input inline_keyboard_6
  inline_keyboard: "{% set lines = [inline_keyboard_1, inline_keyboard_2, inline_keyboard_3,
    inline_keyboard_4, inline_keyboard_5, inline_keyboard_6] %} {% set inline_keyboard
    = namespace(data = []) %} {% for line in lines%}\n  {% if line|length > 0 %}\n
    \   {% set inline_keyboard_line = line %}\n    {% set inline_keyboard.data = inline_keyboard.data
    + [inline_keyboard_line] %}\n  {% endif %}\n{% endfor %} {{ inline_keyboard.data
    }}\n"
condition:
action:
- delay:
    seconds: '{{ delay }}'
- service: telegram_bot.send_message
  data:
    target: '{% if private %}{{ telegram_sender_user_id }}{% else %}{{ telegram_chat_id
      }}{% endif %}'
    title: !input title
    message: !input message
    inline_keyboard: '{{ inline_keyboard }}'
